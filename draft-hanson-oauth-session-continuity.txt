



Web Authorization Protocol                                     J. Hanson
Internet-Draft                                             K. McGuinness
Intended status: Standards Track                                    Okta
Expires: 18 September 2022                                 17 March 2022


                      OAuth 2.0 Session Continuity
              draft-hanson-oauth-session-continuity-latest

Abstract

   This specification defines a mechanism by which an OAuth 2.0
   authorization server can maintain a logical authorization session in
   which protected resources can be accessed over a period time.  This
   specification also extends existing OAuth 2.0 endpoints so that
   dynamic context about the session, such as user location or device
   health, can be communicated to the authorization server throughout
   the lifetime of the session.  Combined, this functionality provides a
   lightweight approach to continuous authorization.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 September 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.










Hanson & McGuinness     Expires 18 September 2022               [Page 1]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Client Profiles . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Token Locality  . . . . . . . . . . . . . . . . . . . . .   4
     1.3.  Notational Conventions  . . . . . . . . . . . . . . . . .   4
   2.  JSON Web Token Claims . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Access Tokens . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Refresh Tokens  . . . . . . . . . . . . . . . . . . . . .   5
   3.  Session Continuity  . . . . . . . . . . . . . . . . . . . . .   6
     3.1.  Refreshing an Access Token  . . . . . . . . . . . . . . .   6
   4.  Signal Sharing  . . . . . . . . . . . . . . . . . . . . . . .   6
     4.1.  Refreshing an Access Token  . . . . . . . . . . . . . . .   6
       4.1.1.  From On Device  . . . . . . . . . . . . . . . . . . .   6
       4.1.2.  From Off Device . . . . . . . . . . . . . . . . . . .   7
     4.2.  Token Introspection . . . . . . . . . . . . . . . . . . .   7
       4.2.1.  Introspection Request . . . . . . . . . . . . . . . .   7
   5.  Comparison to CAEP  . . . . . . . . . . . . . . . . . . . . .   8
   6.  Normative References  . . . . . . . . . . . . . . . . . . . .   8
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   In OAuth 2.0 [RFC6749], an authorization server issues an access
   token and refresh token to a client.  The client uses the access
   token to access protected resources hosted by a resource server, and
   uses the refresh token to obtain access tokens from the authorization
   server.  While the authorization server, client, and resource server
   are separate entities, the usage of the access token and refresh
   token forms a logical authorization session shared between each
   entity.

   The access token and refresh token are issued by the authorization
   server after authenticating the resource owner and obtaining
   authorization.  Authorization is typically obtained by interacting
   with the resource owner via the authorization endpoint.  Once
   authorization has been obtained, issuance of the tokens initiates an
   ongoing session in which protected resources may be accessed over a
   period of hours or even days.



Hanson & McGuinness     Expires 18 September 2022               [Page 2]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


   During this time, the status of the resource owner and her device,
   such as role, location, or security posture, may change.
   Increasingly, access to protected resources needs to be based on this
   dynamically changing context.  However, typical OAuth deployments
   evaluate this context infrequently - often only at session
   initiation.

   This specification provides mechanisms by which an OAuth deployment
   can both increase the frequency of access policy evaluation during a
   session, as well as increase awareness of dynamically changing
   context about the session used to inform policy decisions.  Combined,
   this functionality provides a lightweight approach to continuous
   authorization.

1.1.  Client Profiles

   This specification has been designed around the client profiles
   defined in Section 2.1 of [RFC6749]:

   web application:
      A web application is a confidential client running on a web
      server.  Resource owners access the client via an HTML user
      interface rendered in a user-agent on the device used by the
      resource owner.  The client credentials as well as any access
      token issued to the client are stored on the web server and are
      not exposed to or accessible by the resource owner.

   user-agent-based application:
      A user-agent-based application is a public client in which the
      client code is downloaded from a web server and executes within a
      user-agent (e.g., web browser) on the device used by the resource
      owner.  Protocol data and credentials are easily accessible (and
      often visible) to the resource owner.  Since such applications
      reside within the user-agent, they can make seamless use of the
      user-agent capabilities when requesting authorization.

   native application:
      A native application is a public client installed and executed on
      the device used by the resource owner.  Protocol data and
      credentials are accessible to the resource owner.  It is assumed
      that any client authentication credentials included in the
      application can be extracted.  On the other hand, dynamically
      issued credentials such as access tokens or refresh tokens can
      receive an acceptable level of protection.  At a minimum, these
      credentials are protected from hostile servers with which the
      application may interact.  On some platforms, these credentials
      might be protected from other applications residing on the same
      device.



Hanson & McGuinness     Expires 18 September 2022               [Page 3]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


1.2.  Token Locality

   After obtaining approval of the end-user via interaction within the
   end-user's user-agent, OAuth issues delegation-specific access tokens
   and refresh tokens to clients.  This specification defines two token
   localities, based on where tokens reside relative to the user-agent
   in which the issuance was approved:

   off device:
      A token is off device when it resides with an application that is
      not located on the same device as the end-user's user-agent.
      Tokens issued to a web application are off device, as the
      application runs on a web server acceessed remotely via the user-
      agent.

   on device:
      A token is on device when it resides with an application that is
      located on the same device as the end-user's user-agent.  Tokens
      issued to native native applications and user-agent-based
      applications are on device, as the application is executing either
      on the device or within the user-agent itself.

1.3.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  JSON Web Token Claims

   Access tokens and refresh tokens are opaque, and can have different
   formats, structures, and methods of utilization based on resource
   server and authorization server security requirements.  Although the
   mechanisms described herein can be used with any type of token, this
   section defines claims to express such semantics specifically for
   JSON Web Token (JWT) [RFC7519].  Similar definitions for other types
   of tokens are possible but beyond the scope of this specification.

2.1.  Access Tokens

   JSON Web Token Profile for OAuth 2.0 Access Tokens [RFC9068] defines
   a profile for issuing OAuth 2.0 access tokens in JSON Web Token (JWT)
   format.  OAuth 2.0 deployments implementing this specification MAY
   issue access tokens in conformance that profile.  Deployments that do
   not issue access tokens in conformance with that profile SHOULD
   include semantically equivalent claims in a deployment-specific token



Hanson & McGuinness     Expires 18 September 2022               [Page 4]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


   format.

   The following additional claims SHOULD be included to facilitate
   session continuity.

   sid - as defined in Section 3 of OpenID.FrontChannel.

2.2.  Refresh Tokens

   Unlike access tokens, refresh tokens are intended only for use with
   authorization servers.  Thus, their format is an internal
   implementation detail of an authorization server and there is little
   need for a profile to establish interoperability between
   implementations.

   OAuth 2.0 deployments implementing this specification MAY issue
   refresh tokens in JWT format.  Implementations that issue refresh
   tokens in JWT format SHOULD include the following claims.

   iss - as defined in Section 4.1.1 of [RFC7519].

   exp - as defined in Section 4.1.4 of [RFC7519].

   aud - as defined in Section 4.1.3 of [RFC7519].

   sub - as defined in Section 4.1.2 of [RFC7519].

   client_id - as defined in Section 4.3 of [RFC8693].

   iat - as defined in Section 4.1.6 of [RFC7519].  This claim
   identifies the time at which the JWT refresh token was issued.

   jti - as defined in Section 4.1.7 of [RFC7519].

   sid - as defined in Section 3 of OpenID.FrontChannel.

   This specification registers the "application/rt+jwt" media type,
   which can be used to indicate that the content is a JWT refresh
   token.  JWT refresh tokens MUST include this media type in the "typ"
   header parameter to explicitly declare that the JWT represents a
   refresh token.

   Deployments that do not issue refresh tokens in JWT format SHOULD
   include semantically equivalent claims in a deployment-specific token
   format.






Hanson & McGuinness     Expires 18 September 2022               [Page 5]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


3.  Session Continuity

   An authorization server can issue an access token and, optionally, a
   refresh token in response to any authorization grant defined by
   [RFC7519] and subsequent extensions.  To facilitate session
   continuity, an authorization server SHOULD include the "sid" claim in
   the access token and refresh token, if any.

   For example, the client makes the following HTTP request using TLS to
   the token endpoint (with extra line breaks for display purposes
   only):

     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
     &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb

3.1.  Refreshing an Access Token

4.  Signal Sharing

4.1.  Refreshing an Access Token

4.1.1.  From On Device

   A native application possessing a refresh token that is on device
   shares signals by making a refresh request that includes device
   posture, as defined in section 6 of
   [I-D.wdenniss-oauth-device-posture].

   For example, the client makes the following HTTP request using
   transport-layer security (with extra line breaks for display purposes
   only):

     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
     client_id=s6BhdRkqt3&device_posture=%7B%22screen_lock%22%3Atrue%2C
     %22device_os%22%3A%22iOS%22%2C%22device_os_version%22%3A%2211.1%22
     %7D






Hanson & McGuinness     Expires 18 September 2022               [Page 6]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


4.1.2.  From Off Device

   A web application posessing a refresh token that is off device shares
   signals by making a refresh request that includes user-agent posture,
   as defined by User Agent Posture Signals.

   For example, the client makes the following HTTP request using
   transport-layer security (with extra line breaks for display purposes
   only):

  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded

  grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
  client_id=s6BhdRkqt3&user_agent_posture=%7B%22user_agent%22%3A%22Mozilla%2F5.0
  %20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_14_5%29%20AppleWebKit%2F537.36
  %20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F75.0.3770.142%20Safari%2F537.36%22
  %2C%22ip_address%22%3A%2293.184.216.34%22%7D

   The client MUST only include user-agent posture in online access
   scenarios.  Refresh tokens used in offline scenarios, when the end-
   user is not present, are decoupled from the session and lack end-user
   user agent context.

4.2.  Token Introspection

4.2.1.  Introspection Request

   A resource server querying for to determine the state of an access
   token shares signals by making an by making an introspection request
   to the introspection endpoint, as defined in Section 2.1 of
   [RFC7662].

   In addition to the parameters defined by Section 2.1 of [RFC7662],
   the following parameters are also defined:

   user_agent_posture  OPTIONAL.  URL-encoded JSON dictionary,
      containing user-agent posture signals, as defined by User Agent
      Posture Signals.

   For example, the client makes the following HTTP request using
   transport-layer security (with extra line breaks for display purposes
   only):






Hanson & McGuinness     Expires 18 September 2022               [Page 7]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


  POST /introspect HTTP/1.1
  Host: server.example.com
  Accept: application/json
  Content-Type: application/x-www-form-urlencoded
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

  token=mF_9.B5f-4.1JqM&token_type_hint=access_token
  &user_agent_posture=%7B%22user_agent%22%3A%22Mozilla%2F5.0
  %20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_14_5%29%20AppleWebKit%2F537.36
  %20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F75.0.3770.142%20Safari%2F537.36%22
  %2C%22ip_address%22%3A%2293.184.216.34%22%7D

   Note that the locality of an access token is always off device when
   presented to a resource server.

5.  Comparison to CAEP

   Use of existing endpoints is intended to provide a lightweight
   approach to continuous authorization, while complimenting future
   protocols that provide real-time access evaluation using a publish-
   subscribe approach.

6.  Normative References

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC9068]  Bertocci, V., "JSON Web Token (JWT) Profile for OAuth 2.0
              Access Tokens", RFC 9068, DOI 10.17487/RFC9068, October
              2021, <https://www.rfc-editor.org/info/rfc9068>.







Hanson & McGuinness     Expires 18 September 2022               [Page 8]

Internet-Draft        OAuth 2.0 Session Continuity            March 2022


   [RFC8693]  Jones, M., Nadalin, A., Campbell, B., Ed., Bradley, J.,
              and C. Mortimore, "OAuth 2.0 Token Exchange", RFC 8693,
              DOI 10.17487/RFC8693, January 2020,
              <https://www.rfc-editor.org/info/rfc8693>.

   [I-D.wdenniss-oauth-device-posture]
              Denniss, W., McGuinness, K., and J. Bradley, "OAuth 2.0
              Device Posture Signals", Work in Progress, Internet-Draft,
              draft-wdenniss-oauth-device-posture-01, 13 November 2017,
              <https://www.ietf.org/archive/id/draft-wdenniss-oauth-
              device-posture-01.txt>.

   [RFC7662]  Richer, J., Ed., "OAuth 2.0 Token Introspection",
              RFC 7662, DOI 10.17487/RFC7662, October 2015,
              <https://www.rfc-editor.org/info/rfc7662>.

Authors' Addresses

   Jared Hanson
   Okta
   Email: jared.hanson@okta.com


   Karl McGuinness
   Okta
   Email: kmcguinness@okta.com

























Hanson & McGuinness     Expires 18 September 2022               [Page 9]
